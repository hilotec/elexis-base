<?xml version="1.0" encoding="UTF-8"?>
<!--  ==========================================================================
	
	This is the schema definition for a "xChange" process encoded
	in XML. A xChange XML data file allows the export and import of structured
	data from one physician software to an other. Hence it is the tool
	to exchange structured data (addresses, treatments, reports,...) among
	physicians. 
	
	Permission to use, and distribute this schema and its accompanying
	documentation for any purpose and without fee is hereby granted in perpetuity,
	provided that the above copyright notice and this paragraph appear in all copies
	and this schema file is not altered.
	The copyright holders make no representation about the suitability of the schema
	for any purpose.
	
	It is provided "as is" without expressed or implied warranty.
	
	Copyright (c) 2007 Forum Datenaustausch, http://www.forum-datenaustausch.ch
	SGAM
	All Rights Reserved.
	$$VERSION: 5.00.1
	$Id: xChange_501.xsd 2952 2007-08-04 14:56:20Z rgw_ch $
	==========================================================================  -->
<schema targetNamespace="http://www.forum-datenaustausch.ch/de"
	xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
	xmlns:xchange="http://www.forum-datenaustausch.ch/de"
	elementFormDefault="qualified" attributeFormDefault="unqualified">



	<!-- =======================================================================
		import of encryption and signature schema definitions as local files
		in fact MSXML4.0 has a problem with network loaded schema definitions
		and there is a significant time impact of always loading these schemas 
		from W3C.
		
		W3C locations:
		http://www.w3c.org/TR/xmlenc-core/xenc-schema.xsd
		http://www.w3c.org/TR/xmldsig-core/xmldsig-core-schema.xsd
		======================================================================= -->
	<import namespace="http://www.w3.org/2000/09/xmldsig#"
		schemaLocation="xmldsig-core-schema.xsd" />
	<import namespace="http://www.w3.org/2001/04/xmlenc#"
		schemaLocation="xenc-schema.xsd" />

	<!-- =======================================================================
		General data type definitions
		======================================================================= -->
	<!--  string not null -->
	<simpleType name="nonEmptyStringType">
		<restriction base="string">
			<minLength value="1" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-3 characters  -->
	<simpleType name="stringType1_3">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="3" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-9 characters  -->
	<simpleType name="stringType1_9">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="9" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-25 characters  -->
	<simpleType name="stringType1_25">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="25" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-35 characters  -->
	<simpleType name="stringType1_35">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="35" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-50 characters  -->
	<simpleType name="stringType1_50">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="50" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-70 characters  -->
	<simpleType name="stringType1_70">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="70" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-80 characters  -->
	<simpleType name="stringType1_80">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="80" />
		</restriction>
	</simpleType>

	<!--  string type with length 0-255 characters	-->
	<simpleType name="stringType0_255">
		<restriction base="string">
			<minLength value="0" />
			<maxLength value="255" />
		</restriction>
	</simpleType>
	<!--  string type with length 1-255 characters	-->
	<simpleType name="stringType1_255">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="255" />
		</restriction>
	</simpleType>

	<!--  EAN, ZSR, NIF and SSN numbers -->
	<simpleType name="eanPartyType">
		<restriction base="string">
			<pattern value="([0-9]{13})" />
		</restriction>
	</simpleType>
	<simpleType name="zsrPartyType">
		<restriction base="string">
			<pattern value="([A-Z][0-9]{6})" />
		</restriction>
	</simpleType>
	<simpleType name="ssnPartyType">
		<restriction base="string">
			<pattern value="[1-9][0-9]{10}|756[0-9]{10}|undef" />
		</restriction>
	</simpleType>

	<!--  hierarchy type -->
	<simpleType name="hierarchyType">
		<restriction base="string">
			<pattern value="([0-9.])" />
		</restriction>
	</simpleType>

	<!--  LOINC type -->
	<simpleType name="loincType">
		<restriction base="string">
			<pattern value="([0-9]{1,5}-[0-9]|undef)" />
		</restriction>
	</simpleType>

	<!--  SGAM type -->
	<simpleType name="sgamType">
		<restriction base="string">
			<pattern value="(SGAM.[0-9]{4}.[0-9]{4}|other)" />
		</restriction>
	</simpleType>

	<simpleType name="loinc_sgamUnionType">
		<union memberTypes="xchange:loincType xchange:sgamType" />
	</simpleType>
	<simpleType name="emailType">
		<restriction base="xchange:stringType1_70">
			<pattern value=".+@.+" />
		</restriction>
	</simpleType>


	<!-- =======================================================================
		processing data type definitions
		======================================================================= -->
	<!--  processing definitions -->
	<complexType name="processingType">
		<sequence>
			<choice>
				<element name="routed_transport"
					type="xchange:routedTransportType" />
				<element name="intermediate_transport"
					type="xchange:intermediateTransportType" />
			</choice>
		</sequence>
	</complexType>

	<!--  individual transport layer definitions -->
	<complexType name="routedTransportType">
		<attribute name="from" type="anyURI" use="required" />
		<attribute name="to" type="anyURI" use="required" />
	</complexType>
	<complexType name="intermediateTransportType">
		<sequence>
			<element name="via" type="xchange:eanPartyType"
				maxOccurs="unbounded" />
		</sequence>
		<attribute name="from" type="xchange:eanPartyType"
			use="required" />
		<attribute name="to" type="xchange:eanPartyType" use="required" />
	</complexType>

	<!-- =======================================================================
		prolog: data type definitions for producing a chain of involved software
		======================================================================= -->
	<!--  prolog section -->
	<complexType name="prologType">
		<sequence>
			<element name="package" type="xchange:softwareType"
				minOccurs="0" />
			<element name="generator" type="xchange:softwareType" />
		</sequence>
	</complexType>

	<complexType name="softwareType">
		<sequence>
			<element name="depends_on" type="xchange:dependsOnType"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="name" type="xchange:stringType1_50"
			use="required" />
		<attribute name="copyright" type="xchange:stringType1_50" />
		<attribute name="description" type="xchange:stringType1_50" />
		<attribute name="version">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="id" default="0">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<complexType name="dependsOnType">
		<attribute name="name" type="xchange:stringType1_50"
			use="required" />
		<attribute name="copyright" type="xchange:stringType1_50" />
		<attribute name="description" type="xchange:stringType1_50" />
		<attribute name="version">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="id" default="0">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<!-- =======================================================================
		address data type definitions for companies and persons
		======================================================================= -->

	<complexType name="personType">
		<sequence>


			<element name="ID" type="xchange:identityType"></element>

			<element name="misc" type="anySimpleType"></element>
		</sequence>
		<attribute name="salutation" type="xchange:stringType1_35" />
		<attribute name="title" type="xchange:stringType1_35" />
		<attribute name="familyName" type="string"></attribute>
		<attribute name="givenName" type="string"></attribute>
		<attribute name="birthDate" type="date"></attribute>
		<attribute name="gender">
			<simpleType>
				<restriction base="string">
					<pattern value="[m|f]"></pattern>

					<length value="1"></length>
				</restriction>
			</simpleType>
		</attribute>
	</complexType>


	<complexType name="companyType">
		<sequence>
			<element name="companyname" type="xchange:stringType1_35" />
			<element name="department" type="xchange:stringType1_35"
				minOccurs="0" />
			<element name="ID" type="xchange:identityType"></element>
		</sequence>
	</complexType>


	<complexType name="postalAddressType">
		<annotation>
			<documentation>
				The contents of this element is a representation of this
				address in a form who it should be printed on an
				envelope. Note that this might be quite different from
				anything that could be computed from the attributes. For
				example, The label might containt things like "c/o",
				"floor 3" etc. Of course, an application still might try
				to generate a reasonable default address field from the
				attributes, if no contents is found. The contents can
				(and usually will) contain Newline characters (ASCII 10,
				\n) that must be honored by the interpreting
				application.


			</documentation>
		</annotation>

		<attribute name="pobox">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="35"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="street">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="50"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="state">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="9"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="country">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="3"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="city">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="80"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<complexType name="connectionType">
		<sequence>
			<element name="postal" type="xchange:postalAddressType"
				minOccurs="0" maxOccurs="1" />
			<element name="email" type="xchange:emailType"
				maxOccurs="unbounded" minOccurs="0">
			</element>
			<element name="url" type="anyURI" maxOccurs="unbounded"
				minOccurs="0">
			</element>
			<element name="phone" maxOccurs="unbounded" minOccurs="0">
				<simpleType>
					<restriction base="string">
						<pattern value="[0-9- ]{5,}"></pattern>
					</restriction>
				</simpleType>
			</element>
		</sequence>
		<attribute name="type" type="string">
			<annotation>
				<documentation>
					The connection gives a method to contact a person or
					organization. A person or organization can have zero
					or more connections. Each connection is identified
					by the type attribute which might be something like
					"home" or "business". One connection should be
					"default".
				</documentation>
			</annotation></attribute>
	</complexType>

	<!-- =======================================================================
		the specific address role definitions
		
		Note that the "misc" attribute allows for the transport of data 
		(e.g. religion, race,...) not (yet) covered by the scheme - it should
		be formatted xml like (e.g. misc="religion=&quot;catholic&quot;")
		======================================================================= -->
	<!--  author's address type -->
	<complexType name="authorAddressType">
		<choice>
			<element name="company" type="xchange:companyType" />
			<element name="person" type="string" />
		</choice>
		<attribute name="ean_party" type="xchange:eanPartyType" />
		<attribute name="zsr" type="xchange:zsrPartyType" />
		<attribute name="specialty" type="xchange:stringType0_255" />
	</complexType>

	<!-- address type for all other roles -->
	<complexType name="addressType">
        <annotation>
        	<documentation>
        		TBD: ean_party, zsr and specialty are redunancies. EAN
        		points to a database entry that contains the same
        		informations as ZSR and specialty give. The need of the
        		ean attribute depends on the role. We might demand, that
        		the ID must be the EAN if the role is one that requires
        		an EAN. Interpreting applications can then look up ZSR,
        		NIF, specialty, Tarmed-dignity etc.from that EAN as they
        		need it.

        	</documentation>
        </annotation>
        <sequence>
			<choice>
				<element name="person" type="xchange:personNameType" />
				<element name="company" type="xchange:companyType" />
			</choice>
			<element name="connection" type="xchange:connectionType" maxOccurs="unbounded" minOccurs="1"/>
			<element name="ID" type="xchange:identityType" maxOccurs="1" minOccurs="1"></element>
		</sequence>
		<attribute name="ean_party" type="xchange:eanPartyType" />
		<attribute name="zsr" type="xchange:zsrPartyType" />
		<attribute name="specialty" type="xchange:stringType0_255" />
		<attribute name="role" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="physician" />
					<enumeration value="hospital" />
					<enumeration value="pharmacist" />
					<enumeration value="labtechnician" />
					<enumeration value="orthopaedictechnician" />
					<enumeration value="dentist" />
					<enumeration value="dentaltechnician" />
					<enumeration value="dentalhygienist" />
					<enumeration value="physiotherapist" />
					<enumeration value="ergotherapist" />
					<enumeration value="logotherapist" />
					<enumeration value="chiropraktor" />
					<enumeration value="diet" />
					<enumeration value="diabetics" />
					<enumeration value="massage" />
					<enumeration value="midwife" />
					<enumeration value="wholesaler" />
					<enumeration value="shoemaker" />
					<enumeration value="nurse" />
					<enumeration value="ambulance" />
					<enumeration value="druggist" />
					<enumeration value="carrier" />
					<enumeration value="guarantor" />
					<enumeration value="insurance_kvg" />
					<enumeration value="insurance_uvg" />
					<enumeration value="insurance_ivg" />
					<enumeration value="insurance_mvg" />
					<enumeration value="government" />
					<enumeration value="employer" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="misc" type="string" />
	</complexType>

	<!--  patient's address type -->

	<!-- =======================================================================
		document data type definitions
		======================================================================= -->
	<complexType name="documentType">
		<choice>
			<element name="base64" type="base64Binary" />
			<element name="url" type="anyURI" />
		</choice>
		<attribute name="filename" type="xchange:stringType1_255"
			use="required" />
		<attribute name="mimeType" type="xchange:stringType1_255"
			use="required" />
		<attribute name="viewer" type="anyURI" />
		<attribute name="id" type="ID" use="required" />
	</complexType>

	<!-- =======================================================================
		treatment data type definitions
		
		consists of an XML invoice document (and optionally a credit file) and 
		the status of the treatment
		Since SUMEX1 can load the data from an XML file one can indirectly
		load, extract, and reconsitute all parameters via the XML invoice file
		======================================================================= -->
	<complexType name="treatmentType">
		<attribute name="invoice_ref" type="IDREF" />
		<attribute name="credit_ref" type="IDREF" />
		<attribute name="status" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="open" />
					<enumeration value="settled" />
					<enumeration value="paid" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<!-- =======================================================================
		diagosisType data type definitions
		
		defines a diagnosis - note that the hierarchy attribute allows for
		hierarchic ordering of any depth by using a schema "1.2.3.6" meaning
		the 6th diagnosis in the 3-fold hiereachy 1.2.3
		======================================================================= -->
	<complexType name="diagnosisType">
		<attribute name="name" type="xchange:stringType1_255"
			use="required" />
		<attribute name="code" type="xchange:stringType1_255"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="TI" />
					<enumeration value="ICPC2" />
					<enumeration value="ICD10" />
					<enumeration value="freetext" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date" type="dateTime" />
		<attribute name="is_active" type="boolean" default="true" />
		<attribute name="is_chronic" type="boolean" default="false" />
		<attribute name="hierarchy" type="xchange:hierarchyType" />
		<attribute name="id" type="ID" use="required" />
	</complexType>

	<!-- =======================================================================
		medicationType data type definitions
		
		defines the used drug and optional posologies
		======================================================================= -->
	<complexType name="medicationType">
		<sequence>
			<element name="posology" type="xchange:posologyType"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>

		<attribute name="name" type="xchange:stringType1_255"
			use="required" />
		<attribute name="code" type="xchange:stringType1_255"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="pharmaCode" />
					<enumeration value="swissmedicCode" />
					<enumeration value="ean13Code" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date_begin" type="dateTime" use="required" />
		<attribute name="date_end" type="dateTime" />
		<attribute name="is_chronic" type="boolean" default="false" />
	</complexType>

	<complexType name="posologyType">
		<attribute name="date_begin" type="dateTime" />
		<attribute name="date_end" type="dateTime" />
		<attribute name="quantity_morning" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_noon" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_evening" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_night" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="recipe" type="xchange:stringType0_255" />
	</complexType>

	<!-- =======================================================================
		allergyType data type definitions
		
		defines an allergy diagnosis
		======================================================================= -->
	<complexType name="allergyType">
		<attribute name="name" type="xchange:stringType1_255"
			use="required" />
		<attribute name="code" type="xchange:stringType1_255" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="drugID" />
					<enumeration value="substanceID" />
					<enumeration value="food" />
					<enumeration value="environmental" />
					<enumeration value="latex" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="severity" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="low" />
					<enumeration value="medium" />
					<enumeration value="strong" />
					<enumeration value="verystrong" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date" type="dateTime" />
		<attribute name="confirmed" type="boolean" default="true" />
		<attribute name="providerEAN" type="xchange:eanPartyType" />
		<attribute name="responsibleEAN" type="xchange:eanPartyType" />
	</complexType>

	<!-- =======================================================================
		labTextResultType | labNumericResultType data type definitions
		
		defines one lab result of type text or numeric
		======================================================================= -->

	<!-- =======================================================================
		definition for a textual lab measurement (based on textResultType)
		
		Attributes:
		lab_code		a lab specific abbreviation of the measurement (e.g. glu,...)
		reference		optional reference for the measurement
		abnormal_flag	the abnormal flag of the measurement as defined in HL7
		OBX:Abnormal Flags
		status			the status of result either final or preliminary
		machine			the machine that produced the result
		producer		the lab name for external labs | internal lab
		remark			optional remark for the measurement
		======================================================================= -->
	<complexType name="labTextResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="lab_code"
					type="xchange:stringType0_255" />
				<attribute name="reference"
					type="xchange:stringType0_255" />
				<attribute name="abnormal_flag"
					type="xchange:stringType0_255" />
				<attribute name="status" default="final">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="preliminary" />
							<enumeration value="final" />
						</restriction>
					</simpleType>
				</attribute>
				<attribute name="machine"
					type="xchange:stringType0_255" />
				<attribute name="producer"
					type="xchange:stringType0_255" />
				<attribute name="remark" type="xchange:stringType0_255" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		definition for a numeric lab measurement (based on numericResultType)
		
		
		Attributes:
		lab_code		a lab specific abbreviation of the measurement (e.g. glu,...)
		lower_reference optional lower reference bound of the measurement
		upper_reference optional upper reference bound of the measurement
		note the bound are included in the interval e.g.
		x is element of [lower,upper]
		abnormal_flag	the abnormal flag of the measurement as defined in HL7
		OBX:Abnormal Flags
		status			the status of result either final or preliminary
		machine			the machine that produced the result
		producer		the lab name for external labs | internal lab
		remark			optional remark for the measurement
		======================================================================= -->
	<complexType name="labNumericResultType">
		<complexContent>
			<extension base="xchange:numericResultType">
				<attribute name="lab_code"
					type="xchange:stringType0_255" />
				<attribute name="lower_reference" type="double" />
				<attribute name="upper_reference" type="double" />
				<attribute name="abnormal_flag"
					type="xchange:stringType0_255" />
				<attribute name="status" default="final">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="preliminary" />
							<enumeration value="final" />
						</restriction>
					</simpleType>
				</attribute>
				<attribute name="machine"
					type="xchange:stringType0_255" />
				<attribute name="producer"
					type="xchange:stringType0_255" />
				<attribute name="remark" type="xchange:stringType0_255" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		textResultType | numericResultType data type definitions
		
		defines a texual or numeric result (apart from lab).
		each result can reference documents
		======================================================================= -->

	<!-- =======================================================================
		definition for a textual measurement (based on resultType)
		
		Attributes:
		value			value of the measurement
		type			qualification of the measurement either of type LOINC or SGAM
		code			code (in the coding system of type) of the measurement
		======================================================================= -->
	<complexType name="textResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="value" type="xchange:stringType1_255"
					use="required" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		definition for a numeric measurement (based on resultType)
		
		Attributes:
		value			value (double) of the measurement
		unit			the unit of the measurement. note that this attribute MUST be
		coded in UCUM format (Unified Code for Units of Measure 
		- http://aurora.regenstrief.org/UCUM) to allow for a common basis.
		since the unit is required it must at least be unit="1" in case
		of pure numbers!
		operator		operator of the number
		======================================================================= -->
	<complexType name="numericResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="value" type="double" use="required" />
				<attribute name="unit" type="xchange:stringType1_255"
					use="required" />
				<attribute name="operator" default="equal">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="less" />
							<enumeration value="less_than" />
							<enumeration value="equal" />
							<enumeration value="greater_than" />
							<enumeration value="greater" />
						</restriction>
					</simpleType>
				</attribute>
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		base result type definition
		
		Attributes:
		name			name of the measurement
		type			qualification of the measurement either of type LOINC or SGAM
		code			code (in the coding system of type) of the measurement
		date			date of the measurement
		providerEAN		EAN of provider 
		responsibleEAN	EAN of responsible
		documents_ref	whitelist separated list of adjoining documents
		======================================================================= -->
	<complexType name="resultType">
		<attribute name="name" type="xchange:stringType1_255"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="LOINC" />
					<enumeration value="SGAM" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="code" type="xchange:loinc_sgamUnionType"
			use="required" />
		<attribute name="date" type="dateTime" use="required" />
		<attribute name="providerEAN" type="xchange:eanPartyType" />
		<attribute name="responsibleEAN" type="xchange:eanPartyType" />
		<attribute name="documents_ref" type="IDREFS" />
	</complexType>

	<!-- =======================================================================
		caseType data type definitions
		
		defines one case in terms of a number of {SOAP|text} entries (aka
		case record) and an	optional diagnosis
		======================================================================= -->
	<complexType name="caseType">
		<sequence>
			<element name="case_record" type="xchange:caseRecordType"
				maxOccurs="unbounded" />
		</sequence>

		<attribute name="diagnosis_ref" type="IDREF" />
		<attribute name="title" type="xchange:stringType1_255" />
		<attribute name="is_active" type="boolean" default="true" />
	</complexType>

	<complexType name="caseRecordType">
		<choice minOccurs="0">
			<element name="text" type="xchange:stringType0_255" />
			<sequence>
				<element name="S" type="xchange:stringType0_255" />
				<element name="O" type="xchange:stringType0_255" />
				<element name="A" type="xchange:stringType0_255" />
				<element name="P" type="xchange:stringType0_255" />
			</sequence>
		</choice>

		<attribute name="providerEAN" type="xchange:eanPartyType" />
		<attribute name="responsibleEAN" type="xchange:eanPartyType" />
		<attribute name="date" type="dateTime" use="required" />
		<attribute name="name" type="xchange:stringType1_255"
			use="required" />
		<attribute name="code" type="xchange:stringType0_255" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="ICPC2" />
					<enumeration value="ICD10" />
					<enumeration value="freetext" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="roe_icpc2" type="xchange:stringType0_255" />
		<attribute name="procedure_icpc2"
			type="xchange:stringType0_255" />
	</complexType>

	<!-- =======================================================================
		kg data type definitions
		
		consists of the following elements (all elements are optional)
		diagnosis  	list of diagnoses
		medication 	list of drugs and posologies
		allergies		list of allergies
		lab_results	list of lab data
		results		list of results (apart from lab)
		cases			list of cases
		======================================================================= -->
	<complexType name="kgType">
		<sequence>
			<element name="diagnoses" minOccurs="0">
				<complexType>
					<sequence>
						<element name="diagnosis"
							type="xchange:diagnosisType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="medications" minOccurs="0">
				<complexType>
					<sequence>
						<element name="medication"
							type="xchange:medicationType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="allergies" minOccurs="0">
				<complexType>
					<choice>
						<element name="noAllergy">
							<complexType>
								<attribute name="date" type="dateTime" />
								<attribute name="confirmed"
									type="boolean" default="true" />
								<attribute name="providerEAN"
									type="xchange:eanPartyType" />
								<attribute name="responsibleEAN"
									type="xchange:eanPartyType" />
							</complexType>
						</element>
						<sequence>
							<element name="allergy"
								type="xchange:allergyType" maxOccurs="unbounded" />
						</sequence>
					</choice>
				</complexType>
			</element>
			<element name="lab_results" minOccurs="0">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<element name="lab_text_result"
								type="xchange:labTextResultType" />
							<element name="lab_numeric_result"
								type="xchange:labNumericResultType" />
						</choice>
					</sequence>
				</complexType>
			</element>
			<element name="results" minOccurs="0">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<element name="text_result"
								type="xchange:textResultType" />
							<element name="numeric_result"
								type="xchange:numericResultType" />
						</choice>
					</sequence>
				</complexType>
			</element>
			<element name="cases" minOccurs="0">
				<complexType>
					<sequence>
						<element name="case" type="xchange:caseType"
							maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>

	<!-- =======================================================================
		patient data type definitions
		
		consists of an - address 	required
		treatments optional 	administrative information
		kg			optional	medical information
		======================================================================= -->
	<complexType name="patientType">
		<complexContent>
			<extension base="xchange:personType">
				<sequence>

					<element name="treatments" minOccurs="0">
						<complexType>
							<sequence>
								<element name="treatment"
									type="xchange:treatmentType" maxOccurs="unbounded" />
							</sequence>
						</complexType>
					</element>
					<element name="kg" type="xchange:kgType"
						minOccurs="0" />
					<element name="card" minOccurs="0">
						<complexType>
							<attribute name="personal_id"
								type="xchange:stringType1_35" use="required" />
							<attribute name="card_id"
								type="xchange:stringType1_35" use="required" />
							<attribute name="expiry_date"
								type="dateTime" use="required" />
							<attribute name="control_id"
								type="xchange:stringType1_80" />
						</complexType>
					</element>
					<element name="connection" type="xchange:connectionType"></element>
				</sequence>

				<attribute name="addresses_ref">
					<simpleType>
						<restriction base="IDREFS"></restriction>
					</simpleType>
				</attribute>

			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		body: body data type definitions - this element (and subelements 
		therein) can be encrypted.
		
		Now this is the definition of the real structured data
		======================================================================= -->
	<complexType name="bodyType">
		<sequence>
			<!-- =======================================================================
				defines the main physician software, the generator of the XML file
				and possible dependencies
				======================================================================= -->
			<element name="prolog" type="xchange:prologType" />

			<!-- =======================================================================
				address of the physician/insitution that exported the data (aka the 
				author)
				======================================================================= -->
			<element name="author" type="xchange:authorAddressType" />

			<!-- =======================================================================
				definition of various addresses - this is an optional part
				
				of course even if possible patient addresses should not be exported
				as an address
				======================================================================= -->
			<element name="addresses" minOccurs="0">
				<complexType>
					<sequence>
						<element name="address"
							type="xchange:addressType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>

			<!-- =======================================================================
				definition of documents - this is an optional part
				
				since the elements {addresses, documents, patients} are optional
				one can e.g. exchange just a simple non-patient centric document
				======================================================================= -->
			<element name="documents" minOccurs="0">
				<complexType>
					<sequence>
						<element name="document"
							type="xchange:documentType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>

			<!-- =======================================================================
				definition of 1 patient - this is an optional part
				
				the patient element then holds all the patient relevant structured data
				======================================================================= -->
			<element name="patient" type="xchange:patientType"
				minOccurs="0" />

		</sequence>

		<!-- =======================================================================
			title 		should give a hint why this export happened
			timestamp	auto-generated timestamp of generation
			======================================================================= -->
		<attribute name="title" type="xchange:stringType1_255"
			use="required" />
		<attribute name="timestamp" type="dateTime" use="required" />
	</complexType>


	<!-- =======================================================================
		Here starts the request with its root element
		======================================================================= -->

	<element name="xchange" type="xchange:xchangeType" />
	<complexType name="xchangeType">
		<annotation>
			<documentation>
				The top level element of xChange.
			</documentation>
		</annotation>
		<sequence>
			<element name="processing" type="xchange:processingType">
				<annotation>
					<documentation>
						TBD: Don't know what is this for?
					</documentation>
				</annotation>
			</element>


			<element name="ID" type="xchange:identityType">
				<annotation>
					<documentation>
						Identification of this file.
					</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="modus" default="production">
			<annotation>
				<documentation>
					Tell whether this file is for test or production
				</documentation>
			</annotation>
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="production" />
					<enumeration value="test" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="language" use="required">
			<annotation>
				<documentation>
					TBD: This should be valid for any ISO language code,
					no?
				</documentation>
			</annotation>
			<simpleType>
				<restriction base="language">
					<pattern value="(de|fr|it|en)" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="timestamp" type="dateTime"></attribute>
		<attribute name="title" type="xchange:stringType1_255">
			<annotation>
				<documentation>
					A -problably somewhat meaningful- title to describe
					the contents of this file
				</documentation>
			</annotation>
		</attribute>
	</complexType>




	<complexType name="identityType">
		<choice>
			<element name="guid" type="xchange:GUIDType"></element>
			<element name="xid" type="xchange:XIDType"></element>
		</choice>
		<attribute name="method">
			<simpleType>
				<restriction base="string">
					<pattern value="guid|xid"></pattern>
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<simpleType name="GUIDType">
		<annotation>
			<documentation>
				A GUID is a String 10 to 25 characters long that must be
				guaranteed (with a reasonable effort) to be globally
				unique. An application is free to choose any algorithm
				to create such GUIDs as long as they match the
				restriction of this element. Unlike a XID, a GUID does
				not necessarily have a strong bidirectional binding to
				the entity it identifies: It is perfectly possible, that
				the same entity happens to be marked with different
				GUIDs from different applications (e.g. a patient sees
				two doctors independently and is included in both
				doctors EMR's). On the other hand, a GUID will never
				identify more than one entity, becaus it is unique by
				definition. Therefore, an application should act like
				this: If it is about to import an entity, that is
				identified by a GUID, it can first check, whether an
				entity with the same GUID exists already in the
				database. If so, it may safely assume, that the two
				entities are identical. If it does not find suchan
				entitiy, however, it must try to find a local duplicate
				of the data to import by other means, e.g. by analyzing
				the entity's content. If it does find an entity, that
				seems to be identical, but has a different GUID, it
				should ask the user whether the two entities are
				identical. If so, it may (but needs not) change the
				GUID.
			</documentation>
		</annotation>
		<restriction base="string">

			<pattern value="[\w:#+!=]{10,25}"></pattern>
		</restriction>
	</simpleType>

	<complexType name="XIDType">
		<annotation>
			<documentation>
				A XID is an identifier taken from an external identity
				system, e.g. social insurance number, EAN etc. The
				domainURI-attribute is the identification of the
				identity system itself (and may, optionally, point to a
				site describing this system). The url must be globally
				unique. The contents of the element is the ID. An
				application must only be prepared to tell if any such
				XID's are identical or not to any other XID or GUID. If
				an xChange entity is identified with a XID, the
				apllication MUST preserve that XID for future transfers
				of the same data. A XID must never be changed, replaced
				or removed. If an application is about to import an
				entity indentified with a XID, and it finds an element
				with the same XID existing in its database, it may
				safely assume, that these two entities are identical.
				The xChange system does not guarantee any other test for
				proving identity.
			</documentation>
		</annotation>
		<attribute name="domainURI" type="anyURI"></attribute>
	</complexType>
</schema>
