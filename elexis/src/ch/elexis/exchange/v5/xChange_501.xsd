<?xml version="1.0" encoding="UTF-8"?>
<!--  ==========================================================================
	
	This is the schema definition for a "xChange" process encoded
	in XML. A xChange XML data file allows the export and import of structured
	data from one physician software to an other. Hence it is the tool
	to exchange structured data (addresses, treatments, reports,...) among
	physicians. 
	
	Permission to use, and distribute this schema and its accompanying
	documentation without fee is hereby granted in perpetuity,
	provided that the above copyright notice and this paragraph appear in all copies
	and this schema file is not altered.
	The copyright holders make no representation about the suitability of the schema
	for any purpose.
	
	It is provided "as is" without expressed or implied warranty.
	
	Copyright (c) 2007 Forum Datenaustausch, http://www.forum-datenaustausch.ch
	SGAM
	All Rights Reserved.
	$$VERSION: 5.00.1
	$Id: xChange_501.xsd 2975 2007-08-09 14:57:48Z rgw_ch $
	==========================================================================  -->
<schema targetNamespace="http://www.forum-datenaustausch.ch/de"
	xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
	xmlns:xchange="http://www.forum-datenaustausch.ch/de"
	elementFormDefault="qualified" attributeFormDefault="unqualified">



	<!-- =======================================================================
		import of encryption and signature schema definitions as local files
		in fact MSXML4.0 has a problem with network loaded schema definitions
		and there is a significant time impact of always loading these schemas 
		from W3C.
		
		W3C locations:
		http://www.w3c.org/TR/xmlenc-core/xenc-schema.xsd
		http://www.w3c.org/TR/xmldsig-core/xmldsig-core-schema.xsd
		======================================================================= -->
	<import namespace="http://www.w3.org/2000/09/xmldsig#"
		schemaLocation="xmldsig-core-schema.xsd" />
	<import namespace="http://www.w3.org/2001/04/xmlenc#"
		schemaLocation="xenc-schema.xsd" />

	<!-- =======================================================================
		General data type definitions
		======================================================================= -->
	<!--  string not null -->
	<simpleType name="nonEmptyStringType">
		<restriction base="string">
			<minLength value="1" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-3 characters  -->
	<simpleType name="stringType1_3">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="3" />
		</restriction>
	</simpleType>

	<!--  string type with length 1-9 characters  -->
	<simpleType name="stringType1_9">
		<restriction base="string">
			<minLength value="1" />
			<maxLength value="9" />
		</restriction>
	</simpleType>

	
	<!--  EAN, ZSR, NIF and SSN numbers -->
	<simpleType name="eanPartyType">
		<restriction base="string">
			<pattern value="([0-9]{13})" />
		</restriction>
	</simpleType>
	<simpleType name="zsrPartyType">
		<restriction base="string">
			<pattern value="([A-Z][0-9]{6})" />
		</restriction>
	</simpleType>
	<simpleType name="ssnPartyType">
		<restriction base="string">
			<pattern value="[1-9][0-9]{10}|756[0-9]{10}|undef" />
		</restriction>
	</simpleType>

	<!--  hierarchy type -->
	<simpleType name="hierarchyType">
		<restriction base="string">
			<pattern value="([0-9.])" />
		</restriction>
	</simpleType>

	<!--  LOINC type -->
	<simpleType name="loincType">
		<restriction base="string">
			<pattern value="([0-9]{1,5}-[0-9]|undef)" />
		</restriction>
	</simpleType>

	<!--  SGAM type -->
	<simpleType name="sgamType">
		<restriction base="string">
			<pattern value="(SGAM.[0-9]{4}.[0-9]{4}|other)" />
		</restriction>
	</simpleType>

	<simpleType name="loinc_sgamUnionType">
		<union memberTypes="xchange:loincType xchange:sgamType" />
	</simpleType>
	
	<simpleType name="emailType">
		<restriction base="xchange:nonEmptyStringType">
			<pattern value=".+@.+" />
		</restriction>
	</simpleType>

	<simpleType name="roleType">
		<restriction base="NMTOKEN">
			<enumeration value="physician" />
			<enumeration value="hospital" />
			<enumeration value="pharmacist" />
			<enumeration value="labtechnician" />
			<enumeration value="orthopaedictechnician" />
			<enumeration value="dentist" />
			<enumeration value="dentaltechnician" />
			<enumeration value="dentalhygienist" />
			<enumeration value="physiotherapist" />
			<enumeration value="ergotherapist" />
			<enumeration value="logotherapist" />
			<enumeration value="chiropraktor" />
			<enumeration value="diet" />
			<enumeration value="diabetics" />
			<enumeration value="massage" />
			<enumeration value="midwife" />
			<enumeration value="wholesaler" />
			<enumeration value="shoemaker" />
			<enumeration value="nurse" />
			<enumeration value="ambulance" />
			<enumeration value="druggist" />
			<enumeration value="carrier" />
			<enumeration value="guarantor" />
			<enumeration value="insurance_kvg" />
			<enumeration value="insurance_uvg" />
			<enumeration value="insurance_ivg" />
			<enumeration value="insurance_mvg" />
			<enumeration value="government" />
			<enumeration value="employer" />
			<enumeration value="other" />
		</restriction>
	</simpleType>

	<!-- =======================================================================
		processing data type definitions
		======================================================================= -->
	<!--  processing definitions -->
	<complexType name="processingType">
		<sequence>
			<choice>
				<element name="routed_transport"
					type="string" />
				<element name="intermediate_transport"
					type="xchange:intermediateTransportType" />
			</choice>
		</sequence>
	</complexType>

	<!--  individual transport layer definitions -->
	<complexType name="intermediateTransportType">
		<sequence>
			<element name="via" type="xchange:eanPartyType"
				maxOccurs="unbounded" />
		</sequence>
		<attribute name="from" type="xchange:eanPartyType"
			use="required" />
		<attribute name="to" type="xchange:eanPartyType" use="required" />
	</complexType>

	<!-- =======================================================================
		prolog: data type definitions for producing a chain of involved software
		======================================================================= -->
	<!--  prolog section -->
	<complexType name="prologType">
		<sequence>
			<element name="package" type="xchange:softwareType"
				minOccurs="0" />
			<element name="generator" type="xchange:softwareType" />
		</sequence>
	</complexType>

	<complexType name="softwareType">
		<sequence>
			<element name="depends_on" type="xchange:dependsOnType"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />	
		<attribute name="copyright" type="string" />
		<attribute name="description" type="string" />
		<attribute name="version">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="id" default="0">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<complexType name="dependsOnType">
		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="copyright" type="string" />
		<attribute name="description" type="string" />
		<attribute name="version">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="id" default="0">
			<simpleType>
				<restriction base="integer">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<!-- =======================================================================
		address data type definitions for companies and persons
		======================================================================= -->

	<complexType name="personType">
		<sequence>
			<element name="misc" type="anySimpleType"></element>
		</sequence>
		<attribute name="salutation" type="string" />
		<attribute name="title" type="string" />
		<attribute name="familyName" type="xchange:nonEmptyStringType"/>
		<attribute name="givenName" type="string"></attribute>
		<attribute name="birthDate" type="date" use="optional"></attribute>
		<attribute name="gender" use="optional">
			<simpleType>
				<restriction base="string">
					<pattern value="[m|f]"></pattern>

					<length value="1"></length>
				</restriction>
			</simpleType>
		</attribute>
	</complexType>


	<complexType name="companyType">
		<sequence>
			<element name="companyname" type="xchange:nonEmptyStringType" />
			<element name="department" type="string"
				minOccurs="0" />
		</sequence>
	</complexType>


	<complexType name="postalAddressType">
		<annotation>
			<documentation>
				The contents of this element is a representation of this
				address in the format it should be printed on an
				envelope. Note that this might be quite different from
				anything that could be computed from the attributes. For
				example, The label might containt things like "c/o",
				"Floor 3" etc. Of course, an application still might try
				to generate a reasonable default address field from the
				attributes, if no contents is found. The contents can
				(and usually will) contain newline characters (ASCII 10,
				\n) that must be honored by the interpreting
				application.

			</documentation>
		</annotation>

		<attribute name="pobox" use="optional">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="35"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="street" use="optional">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="50"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="state" use="optional">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="9"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="country" use="optional">
            <annotation>
            	<documentation>ISO-Code if th country</documentation>
            </annotation>
            <simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="3"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="city" use="optional">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="80"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<complexType name="connectionType">
		<sequence>
			<element name="postal" type="xchange:postalAddressType"
				minOccurs="0" maxOccurs="1" />
			<element name="email" type="xchange:emailType"
				maxOccurs="unbounded" minOccurs="0">
			</element>
			<element name="url" type="anyURI" maxOccurs="unbounded"
				minOccurs="0">
			</element>
			<element name="phone" maxOccurs="unbounded" minOccurs="0">
				<simpleType>
					<restriction base="string">
						<pattern value="[0-9- ]{5,}"></pattern>
					</restriction>
				</simpleType>
			</element>
		</sequence>
		<attribute name="type" type="string" default="default">
			<annotation>
				<documentation>
					The connection gives a method to contact a person or
					organization. A person or organization can have zero
					or more connections. Each connection is identified
					by the type attribute which might be something like
					"home" or "business". One connection should be
					"default".
				</documentation>
			</annotation></attribute>
	</complexType>

	<!-- =======================================================================
		xChangeParty (former addressType). Can be a person or an organization/company.
		It has a unique ID and one ore more connections
		
		Note that the "misc" attribute allows for the transport of data 
		(e.g. religion, race,...) not (yet) covered by the scheme - it should
		be formatted xml like (e.g. misc="religion=&quot;catholic&quot;")
		======================================================================= -->

	<complexType name="xChangePartyType">
		<annotation>
			<documentation>
				A party is any person or organization being (or able to
				be) part of the xChange system. A party has a role

				TBD: ean_party, zsr and specialty are redunancies. EAN
				points to a database entry that contains the same
				informations as ZSR and specialty give. The need of the
				ean attribute depends on the role. We might demand, that
				the ID must be the EAN if the role is one that requires
				an EAN. Interpreting applications can then look up ZSR,
				NIF, specialty, Tarmed-dignity etc.from that EAN as they
				need it.

			</documentation>
		</annotation>
		<sequence>
			<choice>
				<element name="person" type="xchange:personType" />
				<element name="company" type="xchange:companyType" />
			</choice>
			<element name="connection" type="xchange:connectionType"
				maxOccurs="unbounded" minOccurs="1" />
			<element name="XID" type="xchange:XIDType" maxOccurs="1"
				minOccurs="1">
			</element>
		</sequence>
		<attribute name="ean_party" type="xchange:eanPartyType" />
		<attribute name="zsr" type="xchange:zsrPartyType" />
		<attribute name="specialty" type="string" />
		<attribute name="role" use="required" type="xchange:roleType" />
		<attribute name="misc" type="string" />
        <attribute name="ID" type="ID">
			<annotation>
				<documentation>
					For convenience: The GUID of the nested XID Element.
				</documentation>
			</annotation></attribute>
    </complexType>

	<!--  patient's address type -->

	<!-- =======================================================================
		document data type definitions
		======================================================================= -->
	<complexType name="documentType">
		<choice>
			<element name="base64" type="base64Binary" />
			<element name="url" type="anyURI" />
			<element name="XID" type="xchange:XIDType"></element>
		</choice>
		<attribute name="filename" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="mimeType" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="id" type="string" use="required" />
	</complexType>

	<!-- =======================================================================
		treatment data type definitions
		
		consists of an XML invoice document (and optionally a credit file) and 
		the status of the treatment
		Since SUMEX1 can load the data from an XML file one can indirectly
		load, extract, and reconsitute all parameters via the XML invoice file
		======================================================================= -->
	<complexType name="treatmentType">
		<attribute name="invoice_ref" type="IDREF" >
			<annotation>
				<documentation>
					Administrativer Teil der Behandlung -> Refernz auf
					komplette XML-Rechnung
				</documentation>
			</annotation></attribute>
		<attribute name="credit_ref" type="IDREF" >
			<annotation>
				<documentation>
					Kostengutsprachen zu einer Hehandlung im XML Format
				</documentation>
			</annotation></attribute>
		<attribute name="status" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="open" />
					<enumeration value="settled" />
					<enumeration value="paid" />
				</restriction>
			</simpleType>
		</attribute>
	</complexType>

	<!-- =======================================================================
		diagosisType data type definitions
		
		defines a diagnosis - note that the hierarchy attribute allows for
		hierarchic ordering of any depth by using a schema "1.2.3.6" meaning
		the 6th diagnosis in the 3-fold hiereachy 1.2.3
		======================================================================= -->
	<complexType name="diagnosisType">
		<sequence>
			<element name="XID" type="xchange:XIDType"></element>
		</sequence>
		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="code" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="CHOP" />
					<enumeration value="ICPC2" />
					<enumeration value="ICD10" />
					<enumeration value="freetext" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date" type="dateTime" />
		<attribute name="is_active" type="boolean" default="true" />
		<attribute name="is_chronic" type="boolean" default="false" />
		<attribute name="hierarchy" type="xchange:hierarchyType" />

		<attribute name="ID" type="ID">
			<annotation>
				<documentation>TBD: More design work</documentation>
			</annotation></attribute>
	</complexType>

	<!-- =======================================================================
		medicationType data type definitions
		
		defines the used drug and optional posologies
		======================================================================= -->
	<complexType name="medicationType">
		<sequence>
			<element name="posology" type="xchange:posologyType"
				minOccurs="0" maxOccurs="unbounded" />
			<element name="XID" type="xchange:XIDType"></element>
		</sequence>

		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="code" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="pharmaCode" />
					<enumeration value="swissmedicCode" />
					<enumeration value="ean13Code" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date_begin" type="dateTime" use="required" />
		<attribute name="date_end" type="dateTime" />
		<attribute name="is_chronic" type="boolean" default="false" />
	</complexType>

	<complexType name="posologyType">
		<attribute name="date_begin" type="dateTime" />
		<attribute name="date_end" type="dateTime" />
		<attribute name="quantity_morning" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_noon" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_evening" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="quantity_night" default="0">
			<simpleType>
				<restriction base="double">
					<minInclusive value="0" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="recipe" type="xchange:nonEmptyStringType" />
	</complexType>

	<!-- =======================================================================
		allergyType data type definitions
		
		defines an allergy diagnosis
		======================================================================= -->
	<complexType name="allergyType">
		<sequence>
			<element name="XID" type="xchange:XIDType"></element>
		</sequence>
		<attribute name="name" use="required">
			<simpleType>
				<restriction base="string">
					<minLength value="1"></minLength>
					<maxLength value="255"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="code" type="string" >
			<annotation>
				<documentation>
					z.B. Substanz-ID, generell Subklassifikation
				</documentation>
			</annotation></attribute>
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="drugID" />
					<enumeration value="substanceID" />
					<enumeration value="food" />
					<enumeration value="environmental" />
					<enumeration value="latex" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="severity" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="low" />
					<enumeration value="medium" />
					<enumeration value="strong" />
					<enumeration value="verystrong" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="date" type="dateTime" />
		<attribute name="confirmed" type="boolean" default="true" />

		<attribute name="responsible" type="xchange:xChangePartyRef" />
	</complexType>

	<!-- =======================================================================
		labTextResultType | labNumericResultType data type definitions
		
		defines one lab result of type text or numeric
		======================================================================= -->

	<!-- =======================================================================
		definition for a textual lab measurement (based on textResultType)
		
		Attributes:
		lab_code		a lab specific abbreviation of the measurement (e.g. glu,...)
		reference		optional reference for the measurement
		abnormal_flag	the abnormal flag of the measurement as defined in HL7
		OBX:Abnormal Flags
		status			the status of result either final or preliminary
		machine			the machine that produced the result (sould we say "method"?)
		producer		the lab name for external labs | internal lab
		remark			optional remark for the measurement
		======================================================================= -->
	<complexType name="labTextResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="lab_code"	type="xchange:nonEmptyStringType" use="required"/>
				<attribute name="reference"	type="string" />
				<attribute name="abnormal_flag"	type="string" />
				<attribute name="status" default="final">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="preliminary" />
							<enumeration value="final" />
						</restriction>
					</simpleType>
				</attribute>
				<attribute name="machine"	type="string" />
				<attribute name="producer"	type="xchange:nonEmptyStringType" use="required"/>
				<attribute name="remark" type="string" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		definition for a numeric lab measurement (based on numericResultType)
		
		
		Attributes:
		lab_code		a lab specific abbreviation of the measurement (e.g. glu,...)
		lower_reference optional lower reference bound of the measurement
		upper_reference optional upper reference bound of the measurement
		note the bound are included in the interval e.g.
		x is element of [lower,upper]
		abnormal_flag	the abnormal flag of the measurement as defined in HL7
		OBX:Abnormal Flags
		status			the status of result either final or preliminary
		machine			the machine that produced the result
		producer		the lab name for external labs | internal lab
		remark			optional remark for the measurement
		======================================================================= -->
	<complexType name="labNumericResultType">
		<complexContent>
			<extension base="xchange:numericResultType">
				<attribute name="lab_code"
					type="xchange:nonEmptyStringType" use="required"/>
				<attribute name="lower_reference" type="double" />
				<attribute name="upper_reference" type="double" />
				<attribute name="abnormal_flag"	type="string" />
				<attribute name="status" default="final">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="preliminary" />
							<enumeration value="final" />
						</restriction>
					</simpleType>
				</attribute>
				<attribute name="machine"
					type="xchange:nonEmptyStringType" />
				<attribute name="producer"
					type="xchange:nonEmptyStringType" use="required"/>
				<attribute name="remark" type="string" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		textResultType | numericResultType data type definitions
		
		defines a texual or numeric result (apart from lab).
		each result can reference documents
		======================================================================= -->

	<!-- =======================================================================
		definition for a textual measurement (based on resultType)
		
		Attributes:
		value			value of the measurement
		type			qualification of the measurement either of type LOINC or SGAM
		code			code (in the coding system of type) of the measurement
		======================================================================= -->
	<complexType name="textResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="value" type="xchange:nonEmptyStringType"
					use="required" />
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		definition for a numeric measurement (based on resultType)
		
		Attributes:
		value			value (double) of the measurement
		unit			the unit of the measurement. note that this attribute MUST be
		coded in UCUM format (Unified Code for Units of Measure 
		- http://aurora.regenstrief.org/UCUM) to allow for a common basis.
		since the unit is required it must at least be unit="1" in case
		of pure numbers!
		operator		operator of the number
		======================================================================= -->
	<complexType name="numericResultType">
		<complexContent>
			<extension base="xchange:resultType">
				<attribute name="value" type="double" use="required" />
				<attribute name="unit" type="xchange:nonEmptyStringType"
					use="required" />
				<attribute name="operator" default="equal">
					<simpleType>
						<restriction base="NMTOKEN">
							<enumeration value="less" />
							<enumeration value="less_than" />
							<enumeration value="equal" />
							<enumeration value="greater_than" />
							<enumeration value="greater" />
						</restriction>
					</simpleType>
				</attribute>
			</extension>
		</complexContent>
	</complexType>

	<!-- =======================================================================
		base result type definition
		
		Attributes:
		name			name of the measurement
		type			qualification of the measurement either of type LOINC or SGAM
		code			code (in the coding system of type) of the measurement
		date			date of the measurement
		providerEAN		EAN of provider 
		responsibleEAN	EAN of responsible
		documents_ref	whitelist separated list of adjoining documents
		======================================================================= -->
	<complexType name="resultType">
		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="LOINC" />
					<enumeration value="SGAM" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="code" type="xchange:loinc_sgamUnionType"
			use="required" />
		<attribute name="date" type="dateTime" use="required" />
		<attribute name="providerEAN" type="xchange:eanPartyType" />
		<attribute name="responsibleEAN" type="xchange:eanPartyType" />
		<attribute name="documents_ref" type="IDREFS" />
	</complexType>

	<!-- =======================================================================
		caseType data type definitions
		
		defines one case in terms of a number of {SOAP|text} entries (aka
		case record) and an	optional diagnosis
		======================================================================= -->
	<complexType name="caseType">
		<sequence>
			<element name="case_record" type="xchange:caseRecordType"
				maxOccurs="unbounded" />
			<element name="XID" type="xchange:XIDType"></element>
		</sequence>

		<attribute name="diagnosis_ref" type="IDREF" />
		<attribute name="title" type="xchange:nonEmptyStringType" use="required"/>
		<attribute name="is_active" type="boolean" default="true" />
	</complexType>

	<complexType name="caseRecordType">
		<annotation>
			<documentation>
				TBD: Needs more design work (structure should be more
				generic)
			</documentation>
		</annotation>
		<choice minOccurs="0">
			<element name="text" type="string" />
			<sequence>
				<element name="S" type="string" />
				<element name="O" type="string" />
				<element name="A" type="string" />
				<element name="P" type="string" />
			</sequence>
			<element name="XID" type="xchange:XIDType"></element>
			<element name="meta" type="xchange:metaType"></element>
		</choice>

		<attribute name="author" type="xchange:xChangePartyRef" />
		<attribute name="responsible" type="xchange:xChangePartyRef" />
		<attribute name="date" type="dateTime" use="required" />
		<attribute name="name" type="xchange:nonEmptyStringType"
			use="required" />
		<attribute name="code" type="string" />
		<attribute name="type" use="required">
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="ICPC2" />
					<enumeration value="ICD10" />
					<enumeration value="freetext" />
					<enumeration value="other" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="roe_icpc2" type="string" />
		<attribute name="procedure_icpc2" type="string" />
		<attribute name="ID" type="string">
			<annotation>
				<documentation>
					For convenience: GUID of the nested XID
				</documentation>
			</annotation></attribute>
	</complexType>

	<!-- =======================================================================
		kg data type definitions
		
		consists of the following elements (all elements are optional)
		diagnosis  	list of diagnoses
		medication 	list of drugs and posologies
		allergies		list of allergies
		lab_results	list of lab data
		results		list of results (apart from lab)
		cases			list of cases
		======================================================================= -->
	<complexType name="kgType">
		<sequence>
			<element name="diagnoses" minOccurs="0">
				<complexType>
					<sequence>
						<element name="diagnosis"
							type="xchange:diagnosisType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="medications" minOccurs="0">
				<complexType>
					<sequence>
						<element name="medication"
							type="xchange:medicationType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="allergies" minOccurs="0">
				<complexType>
					<choice>
						<element name="noAllergy">
							<complexType>
								<attribute name="date" type="dateTime" />
								<attribute name="confirmed"
									type="boolean" default="true" />
								<attribute name="providerEAN"
									type="xchange:eanPartyType" />
								<attribute name="responsibleEAN"
									type="xchange:eanPartyType" />
							</complexType>
						</element>
						<sequence>
							<element name="allergy"
								type="xchange:allergyType" maxOccurs="unbounded" />
						</sequence>
					</choice>
				</complexType>
			</element>
			<element name="lab_results" minOccurs="0">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<element name="lab_text_result"
								type="xchange:labTextResultType" />
							<element name="lab_numeric_result"
								type="xchange:labNumericResultType" />
						</choice>
					</sequence>
				</complexType>
			</element>
			<element name="results" minOccurs="0">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<element name="text_result"
								type="xchange:textResultType" />
							<element name="numeric_result"
								type="xchange:numericResultType" />
						</choice>
					</sequence>
				</complexType>
			</element>
			<element name="cases" minOccurs="0">
				<complexType>
					<sequence>
						<element name="case" type="xchange:caseType"
							maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="XID" type="xchange:XIDType"></element>
		</sequence>
		<attribute name="ID" type="string"></attribute>
	</complexType>

	<!-- =======================================================================
		patient data type definitions
		
		consists of an - address 	required
		treatments optional 	administrative information
		kg			optional	medical information
		======================================================================= -->
	<complexType name="patientType">
		<complexContent>
			<extension base="xchange:xChangePartyType">
				<sequence>

					<element name="treatments" minOccurs="0">
						<complexType>
							<sequence>
								<element name="treatment"
									type="xchange:treatmentType" maxOccurs="unbounded" />
							</sequence>
						</complexType>
					</element>
					<element name="kg" type="xchange:kgType"
						minOccurs="0" />
				</sequence>


			</extension>
		</complexContent>
	</complexType>

	
	<!-- =======================================================================
		Here starts the request with its root element
		======================================================================= -->

	<element name="xchange" type="xchange:xChangeDocumentType" />
	<complexType name="xChangeDocumentType">
		<annotation>
			<documentation>
				The top level element of an xChange Document.
			</documentation>
		</annotation>
		<sequence>
			<element name="processing" type="xchange:processingType">
				<annotation>
					<documentation>
						TBD: Don't know what is this for?
					</documentation>
				</annotation>
			</element>

			<!-- =======================================================================
				defines the main physician software, the generator of the XML file
				and possible dependencies
				======================================================================= -->
			<element name="prolog" type="xchange:prologType" />

			<!-- =======================================================================
				address of the physician/insitution that exported the data (aka the 
				author)
				======================================================================= -->
			<element name="author" type="xchange:xChangePartyType" />

			<!-- =======================================================================
				definition of various involved parties - this is an optional part
				
				of course even if possible patient addresses should not be exported
				as an address
				======================================================================= -->
			<element name="parties" minOccurs="0" type="xchange:xChangePartyType">
			</element>

			<!-- =======================================================================
				definition of documents - this is an optional part
				
				since the elements {addresses, documents, patients} are optional
				one can e.g. exchange just a simple non-patient centric document
				======================================================================= -->
			<element name="documents" minOccurs="0">
				<complexType>
					<sequence>
						<element name="document"
							type="xchange:documentType" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>

			<!-- =======================================================================
				definition of 1 patient - this is an optional part
				
				the patient element then holds all the patient relevant structured data
				======================================================================= -->
			<element name="patient" type="xchange:patientType"
				minOccurs="0" />
		
		</sequence>
		<attribute name="modus" default="production">
			<annotation>
				<documentation>
					Tell whether this file is for test or production
				</documentation>
			</annotation>
			<simpleType>
				<restriction base="NMTOKEN">
					<enumeration value="production" />
					<enumeration value="test" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="language" use="required">
			<annotation>
				<documentation></documentation>
			</annotation>
			<simpleType>
				<restriction base="language">
					<pattern value="(de|fr|it|en)" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="timestamp" type="dateTime"></attribute>
		<attribute name="title" type="xchange:nonEmptyStringType">
			<annotation>
				<documentation>
					A -problably somewhat meaningful- title to describe
					the contents of this file
				</documentation>
			</annotation>
		</attribute>
	</complexType>

	<complexType name="XIDType">
		<annotation>
			<documentation>
				A XID (eXtended ID) is a collection of zero or more
				identification systems. system, e.g. social insurance
				number, EAN etc. Each entry consists of a domain URI
				attribute that describes the identity system (and may,
				optionally, point to a site describing this system), an
				ID attribute that is the ID given by that system, and a
				quality marker for this system. (if it a globally unique
				ID, a regional unique ID or only locally attributed) The
				XID Element itself has a globally unique ID as attribute
				(GUID). This attribute is always present and can be the
				only ID if no other ID domains are present.

				If an xChange application imports data from foreign
				sources, it must analyze the XIDS to tell whether an
				entity to import resides already in the database. On
				Import, the apllication MUST always preserve the XID. It
				is an violation of the xChange contract to assign new
				XIDS to existing entities.

				An application using the xChange system must be able to
				compare XIDs. It should use the following algorthm:

				a) if two XID's have the same GUID attribute, they are
				identical. In that case, the application should combine
				the two XID's and use that combination for future
				xChange processes. If the XID's cannot be combined (e.g.
				because they contain identities from the same domain
				with different values, the application should output an
				error message and mark both XID's as invalid.

				b) if two XID's have different GUID attributes, they
				still might be identical. (They could have been created
				by different doctors for the same patient based on the
				same identity system (e.g. Health insurance card).
				Therefore an application importing xChange entities must
				compare all identities contained in th XID's to tell if
				an entity that is to be imported resides already in the
				database. If unsure, the application should always ask
				the user. If two XIDs are found to be identical but
				carrying different GUID's, then the two XIDs should be
				combined as shown in a). The GUID of the resulting XID
				should be one of the existing GUIDS. The appluication
				should use the GUID that comes first when sorting the
				two GUIDS alpabetically.


				c) If an application is to import an entity whose XID is
				marked invalid, it should tell the user, that the
				identity must be verified.
			</documentation>
		</annotation>
		<sequence>

			<element name="identity" maxOccurs="unbounded"
				minOccurs="1">
				<complexType>
					<attribute name="domain" type="anyURI"></attribute>
					<attribute name="value" type="string"></attribute>
					<attribute name="quality">
						<simpleType>
							<restriction base="string">
								<enumeration value="ultimateQuality"></enumeration>
								<enumeration value="globalQuality"></enumeration>
								<enumeration value="regionalQuality"></enumeration>
								<enumeration value="localQuality"></enumeration>
							</restriction>
						</simpleType>
					</attribute>
				</complexType>
			</element>
		</sequence>

		<attribute name="GUID">
			<simpleType>
				<restriction base="string">
					<minLength value="10"></minLength>
					<maxLength value="25"></maxLength>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="valid" type="boolean"></attribute>
	</complexType>

	<simpleType name="XSDSimpleType">
		<restriction base="string"></restriction>
	</simpleType>

	<simpleType name="xChangePartyRef">
		<restriction base="string"></restriction>
	</simpleType>

	<complexType name="metaType">
		<sequence>
            <element name="presentation" type="xchange:presentationType" maxOccurs="unbounded" minOccurs="1"></element>
        </sequence>
	</complexType>

    <complexType name="presentationType"></complexType>
</schema>
