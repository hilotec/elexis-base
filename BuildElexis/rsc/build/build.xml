<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: build.xml 5217 2009-03-21 08:43:55Z rgw_ch $
    (c) 2005-2009 by G. Weirich
    
    This file reflects my personal environment. It is not intended for
    public use. You may, however, use it if you like to, but everyhting 
    can be changed without notice from one version to another, and there is absolutely
    no guarantee that it works correctly nor that it works at all. If it turns your
    500GB Harddisk into a 5.25" Floppy-Disk, that's your own silly fault. I warned you. 
    
     
	Dieses Ant-Script erstellt die Release-Versionen von Elexis
	Targets:
	windows		: Windows-Installer erstellen
	Linux  	    : Linux x386 - Tarball erstellen
	mac         : MacOSX - Paket erstellen
	clean       : Letzten Build wegräumen
    pro         : die Zusatzplugins erstellen
    quick       : Wie pro aber ohne Dokumentation
    all         : Linux, Windows und Mac erstellen

	Voraussetzungen:
	Folgende Verzeichnisstruktur muss existieren
	${rcpbase}/windows/jre     - enthält das passende jre
	                  /rcp     - enthält die unveränderlichen files von Eclipse
	          /linux/jre
	                /rcp
	          /mac/rcp  
	   
	- Ant muss installiert sein
	- Version muss unter Eclipse auf dieser Maschine korrekt lauffähig sein
	- LaTeX inklusive KOMA muss installiert sein, es muss ein kommando 'texify'
	  existieren, welches makeindex und pdflatex laufen lässt
	- Für Windows-Installer: NSIS muss installiert sein
	- Es muss ein externes file namens local.properties im selben Verzeichnis wie dieses
	  build.xml existieren, das folgende systemspezifischen Daten enthält:
	  - svnrepo=svn://localhost/pd2/	# localhost gegen passende Adresse austauschen
	  - rcpbase=e:/dev/build	    	# rcpbase, die die statischen files enthält (s.o.)
	  - keystore=u:/keys/hwkeys			# Zum Signieren der Jars
	  - source=/home/src/eclipse		# Wo die Quellcodes sind
	  - makeself				        # Pfad zum makeself -executable (für Linux-Distri)
	  - nsis				            # Pfad zum nsis-Executable (für Windows-Distri)
	  - dest				            # Pfad zum Ausgabe-Verzeichnis
	  - ooo								# Pfad zum OpenOffice Verzeichnis
	(c) 2005-2008 G. Weirich
-->

<project name="elexis" default="windows" basedir="../../">
	<description>
	    	Elexis - die Praxis
	</description>
	<property environment="env" />
	<property name="version" value="2.0.0" />
	<property name="javatarget" value="1.5" />
	<property file="rsc/build/local.properties" />
	<property name="dist" value="${dest}/Elexis-${version}" />
	<property name="name" value="Elexis" />
	<property name="doc" value="${dest}/doc" />
	<property name="docsource" value="${dest}/output/docsource" />
	<property name="output" value="${dest}/output" />
	<property name="updatefiles" value="${output}/updater" />
	<property name="additions" value="${output}/additional" />
	<property name="plugins" value="${output}/plugins" />
	<property name="rsc" value="rsc" />
	<property name="debug" value="yes" />
	<property name="optimize" value="no" />
	<property name="elexis_plugin" value="${dist}/plugins/ch.elexis_${version}" />

	<!-- Pfade für -classpath des Java-compilers festlegen -->

	<path id="eclipseclasses">
		<pathelement location="${dist}/plugins/" />
		<pathelement location="${dist}/plugins/ch.elexis_${version}/bin" />
		<fileset dir="${dist}/plugins/ch.elexis_${version}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${dist}/plugins/ch.elexis_${version}/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${dist}/plugins">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${dist}/plugins/ch.elexis.importer.div_${version}" />
		<fileset dir="${dist}/plugins/ch.elexis.importer.div_${version}">
			<include name="*.jar" />
		</fileset>
		<!-- pathelement location="${elexis_ebanking_plugin}"/>
		<pathelement location="${elexis_artikel_plugin}"/ -->
		<pathelement location="${dist}/plugins/ch.rgw.utility_${version}" />
		<fileset dir="${dist}/plugins/ch.rgw.utility_${version}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="unoclasses">
		<pathelement location="${elexis_plugin}/bin" />
		<fileset dir="${eclipse}/plugins">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${elexis_oowrapper_plugin}">
			<include name="*.jar" />
		</fileset>
	</path>
	<target name="checkout" unless="unplugged">
		<exec executable="svn" dir="${copysrc}">
			<arg line="update" />
		</exec>
	</target>

	<target name="prepare">
		<mkdir dir="${dest}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${output}" />
		<mkdir dir="${updatefiles}" />
		<mkdir dir="${additions}" />
		<mkdir dir="${plugins}" />
		<mkdir dir="${docsource}" />
		<mkdir dir="${doc}" />
		<antcall target="doc" />
		<copy file="${source}/dokumentation/elexis.pdf" todir="${dist}">
		</copy>
		<condition property="updater.ok">
			<and>
				<available file="../Elexis-MMC" />
				<available file="${dest}/../yguard.jar" />
			</and>
		</condition>

	</target>

	<target name="all">
		<echo message="Please use another target" />
	</target>

	<!-- Plugin ins additions-Verzeichnis für externe plugins bereitstellen -->
	<!-- make_addition, pluginname  -->
	<target name="make_addition">
		<mkdir dir="${additions}/${pluginname}" />
		<mkdir dir="${additions}/${pluginname}/plugins" />
		<mkdir dir="${additions}/${pluginname}/plugins/${targetdir}" />
		<copy todir="${additions}/${pluginname}/plugins/${targetdir}">
			<fileset dir="${dist}/plugins/${targetdir}" />
		</copy>
		<zip basedir="${additions}/${pluginname}" destfile="${additions}/${pluginname}.zip" />
		<delete dir="${additions}/${pluginname}" />
	</target>

	<target name="copy_plugin">
		<echo message="${copydest} , und ${copysrc}" />
		<antcall target="checkout" />
		<mkdir dir="${copydest}" />
		<copy todir="${copydest}">
			<fileset dir="${copysrc}">
				<include name="*.jar" />
				<include name="*.xml" />
				<include name="*.bmp" />
				<include name="*.properties" />
				<include name="bin/**/*.properties" />
				<include name="icons/**/*.*" />
				<include name="rsc/**/*.*" />
				<include name="lib/**/*.*" />
				<include name="META-INF/MANIFEST.MF" />
				<include name="meta-inf/manifest.mf" />
			</fileset>
		</copy>
		<copy todir="${copydest}" failonerror="false">
			<fileset dir="${copysrc}/src" includes="**/*.script" />
			<fileset dir="${copysrc}/src" includes="**/*.properties" />
		</copy>
	</target>

	<target name="doc" unless="skip_texify">
		<exec command="texify --pdf elexis.tex" dir="${source}/dokumentation" />
	</target>
	<target name="texify" unless="skip_texify">
		<!-- echo message="texify ${sourcedir}/doc/${pluginname}.tex" / -->
		<exec command="texify --pdf ${sourcedir}/doc/${pluginname}.tex" dir="${sourcedir}/doc" />
		<copy file="${sourcedir}/doc/${pluginname}.pdf" todir="${doc}" />
	</target>

	<target name="updater" depends="prepare" if="updater.ok">
		<ant antfile="rsc/build/updater.xml" inheritrefs="true"/>
	</target>


	<target name="pro" depends="prepare">
		<ant antfile="rsc/build/plugins.xml" target="elexis-pro" inheritrefs="true" />
	</target>

	<!-- Windows - Version der Distribution -->
	<target name="windows" depends="prepare">
		<delete dir="${dist}" />
		<copy todir="${dist}">
			<fileset dir="${rcpbase}/windows/rcp" />
		</copy>
		<antcall target="updater" />
		<ant antfile="rsc/build/plugins.xml" target="main" inheritrefs="true" />
		<ant antfile="../noatext/build.xml" inheritrefs="true"/>
		<!-- ant antfile="../elexis-trustx-embed/build.xml" inheritrefs="true"/ -->
		<mkdir dir="${dist}/jre" />
		<copy todir="${dist}/jre">
			<fileset dir="${rcpbase}/windows/jre" />
		</copy>
		<exec dir="rsc/build" executable="${nsis}">
			<arg line="elexis-win32-nodemo.nsi" />
		</exec>
	</target>

	<!-- Linux x86 Version der Distribution -->
	<target name="Linux" depends="prepare">
		<delete dir="${dist}" />
		<copy todir="${dist}">
			<fileset dir="${rcpbase}/linux/rcp" />
		</copy>
		<antcall target="updater" />
		<ant antfile="rsc/build/plugins.xml" target="main" inheritrefs="true" />
		<ant antfile="../OOwrapper/build.xml" inheritrefs="true"/>
		<copy file="${rsc}/elexis.xpm" tofile="${dist}/elexis.xpm" />

		<!-- we can not use the copy-task, since this doesn't preserve the attributes -->
		<exec executable="cp">
			<arg line="-r ${rcpbase}/linux/jre ${dist}/jre" />
		</exec>
		<exec executable="chmod" dir="${dist}">
			<arg line="+x elexis" />
		</exec>
		<exec executable="tar" dir="${dest}">
			<arg line="-czf ${output}/elexis-linux-i386-${version}.tgz Elexis-${version}" />
		</exec>
	</target>

	<!-- Mac OSX Version der Distribution -->
	<target name="mac" depends="prepare">
		<delete dir="${dist}" />
		<copy todir="${dist}">
			<fileset dir="${rcpbase}/mac/rcp" />
		</copy>
		<copy file="${rsc}/elexis-mac.icns" tofile="${dist}/elexis-mac.icns" />
		<ant antfile="rsc/build/plugins.xml" target="main" inheritrefs="true"/>
		<exec executable="chmod" dir="${dist}/elexis.app/Contents/MacOS">
			<arg line="+x elexis" />
		</exec>

		<zip destfile="${dest}/output/elexis-macosx-${version}.zip" update="true">
			<zipfileset dir="${dist}" />
			<zipfileset file="${dist}/elexis.app/Contents/MacOS/elexis" prefix="elexis.app/Contents/MacOS" filemode="755" />
		</zip>
	</target>

	<!-- Alles aufräumen -->
	<target name="clean" description="Alle vom Build erstellen files löschen">
		<delete dir="${dest}" />
		<delete dir="${env.TEMP}/elexis-mmc"/>
		<delete file="${env.TEMP}/elexis-mmc.jar"/>
	</target>

</project>