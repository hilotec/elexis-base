<?xml version="1.0" encoding="utf-8"?>
<!--
	Copyright (c) 2010 By G. Weirich and Elexis
	some parts borrowed from N. Giger's hudson build for Elexis
	
	This is a new Buildscript (as of 6/2010), based on the new mercurial repository structure. 
	It will compile all projects found in all repositories in ${repositories} except those listed
	in ${exclude}. 
	Eclipse parts will be pulled from an existing eclipse directory as needed.

    This file reflects my personal environment. It is not intended for
    public use. You may, however, use it if you like to, but everyhting
    can be changed without notice from one version to another, and there is absolutely
    no guarantee that it works correctly nor that it works at all. If it turns your
    500GB Harddisk into a 5.25" Floppy-Disk, that's your own silly fault. I warned you.
	
	
	Prerequisites:
	- Java 1.6
	- A working eclipse instance
	- ant 1.8.0
	- an active internet connection
	- a file named local.properties containing:
		base=path/to/basedir				- the directory where the buildenvironment is
		hg=path/to/mercurial/binary
		platform-runtime=path/to/eclipse	- A directory with the runtime to use
		skip-plugins=name2,name2			- A comma separated list of plugins to SKIP in the Build
		
	Preparation:
	- "hg clone" all repositories you want as subdirectories of ${base}/repositories
	- call "ant windows", "ant linux" or "ant macosx" 
	
	
-->
<project name="elexis" default="all">
	<property name="os" value="windows" />
	<property name="version" value="2.1.0" />
	<property name="javatarget" value="1.6" />
	<property file="local.properties" />

	<property name="output" value="${base}/deploy" />
	<property name="dox" value="${output}/dox" />
	<property name="lib" value="${base}/lib" />
	<property name="rcpbase" value="${base}/lib/rcpbase" />
	<property name="dist" value="${output}/${os}/elexis-${version}" />
	<property name="repositories" value="${base}/repositories" />
	<property name="additions" value="${output}/additions" />
	<tstamp />
	<!-- Set the classpath for wikitext common -->
	<property name="wikitext.standalone" value="${base}/lib" />
	<path id="wikitext.classpath">
		<fileset dir="${wikitext.standalone}">
			<include name="org.eclipse.mylyn.wikitext.*core*.jar" />
		</fileset>
	</path>
	<taskdef classpathref="wikitext.classpath" resource="org/eclipse/mylyn/wikitext/core/util/anttask/tasks.properties" />
	<taskdef name="izpack" classpath="${lib}/izpack-compiler.jar" classname="com.izforge.izpack.ant.IzPackTask" />


	<target name="initialize">
		<mkdir dir="${base}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${additions}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${rcpbase}" />
		<mkdir dir="${dist}/plugins" />
		<get src="http://www.elexis.ch/files/build/org.eclipse.mylyn.wikitext.core.jar" dest="${lib}/org.eclipse.mylyn.wikitext.core.jar" usetimestamp="true" />
		<get src="http://www.elexis.ch/files/build/org.eclipse.mylyn.wikitext.textile.core.jar" dest="${lib}/org.eclipse.mylyn.wikitext.textile.core.jar" usetimestamp="true" />
		<get src="http://team.medelexis.ch/build/jdom.jar" dest="${lib}/jdom.jar" usetimestamp="true" />
		<get src="http://www.elexis.ch/files/build/medelexis-packager.jar" dest="${lib}/medelexis-packager.jar" usetimestamp="true" />
		<get src="http://team.medelexis.ch/build/ant-contrib-1.0b3.jar" dest="${lib}/ant-contrib.jar" usetimestamp="true" />
		<get src="http://www.medelexis.ch/fileadmin/downloads/scala-compiler.jar" dest="${lib}/scala-compiler.jar" usetimestamp="true" />
		<get src="http://www.medelexis.ch/fileadmin/downloads/scala-library.jar" dest="${lib}/scala-library.jar" usetimestamp="true" />
		<get src="http://www.medelexis.ch/fileadmin/downloads/izpack-compiler.jar" dest="${lib}/izpack-compiler.jar" usetimestamp="true" />

		<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib}/ant-contrib.jar" />
		<taskdef name="packager" classname="ch.medelexis.packager.Creator" classpath="${lib}/medelexis-packager.jar;${lib}/jdom.jar" />
		<taskdef name="listDependencies" classname="ch.medelexis.packager.DependencyList" classpath="${lib}/medelexis-packager.jar;${lib}/jdom.jar" />
		<taskdef name="pluginID" classname="ch.medelexis.packager.PluginID" classpath="${lib}/medelexis-packager.jar;${lib}/jdom.jar" />
		<taskdef name="supporter" classname="ch.medelexis.packager.SupportCreator" classpath="${lib}/medelexis-packager.jar" />
		<taskdef resource="scala/tools/ant/antlib.xml">
			<classpath>
				<pathelement location="${lib}/scala-compiler.jar" />
				<pathelement location="${lib}/scala-library.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="update" depends="initialize">
		<for param="repo">
			<path>
				<dirset dir="${repositories}" includes="*" />
			</path>
			<sequential>
				<exec executable="${hg}" dir="@{repo}">
					<arg value="pull" />
					<arg value="-u" />
				</exec>
			</sequential>
		</for>
	</target>

	<!-- generate a plugin: Copies all non-java files and compiles java- and scala- files and builds
		documentation if found. Creates a 
		 medelexis-package after successful compilation, if it finds a "medelexis.xml" in the plugin.
		 must be called with following parameters:
		 sourcedir:         Plugin-Name, i.e. the directory name in the repository
		 plugindir:  The target directory in the plugins-directory of the destination
		 repository: the repository where the sourced are
		 cp:         Reference to the classpath to use
		 -->
	<target name="compile">
		<echo message="create ${plugindir} from ${sourcedir}" />
		<mkdir dir="${plugindir}" />
		<copy todir="${plugindir}">
			<fileset dir="${sourcedir}">
				<include name="*.jar" />
				<include name="*.xml" />
				<include name="*.bmp" />
				<include name="*.properties" />
				<include name="*.script" />
				<include name="bin/**/*.properties" />
				<include name="icons/**/*.*" />
				<include name="rsc/**/*.*" />
				<include name="lib/**/*.*" />
				<include name="META-INF/MANIFEST.MF" />
				<include name="meta-inf/manifest.mf" />
			</fileset>
		</copy>
		<copy todir="${plugindir}" failonerror="false">
			<fileset dir="${sourcedir}/src" includes="**/*.script" />
			<fileset dir="${sourcedir}/src" includes="**/*.properties" />
		</copy>
		<scalac srcdir="${sourcedir}" destdir="${plugindir}" excludes="Tests/**" encoding="UTF-8" classpathref="${cp}" />
		<javac srcdir="${sourcedir}" destdir="${plugindir}" excludes="Tests/**" debug="${debug}" optimize="${optimize}" target="${javatarget}" encoding="UTF-8" classpathref="${cp}" />
		<packager plugindir="${plugindir}" dest="${additions}" skipOnMissing="true" targetVersion="${version}" />
		<mkdir dir="${dox}/${dirname}" />
		<copy todir="${dox}/${dirname}" failonerror="false">
			<fileset dir="${sourcedir}/doc" />
		</copy>
		<wikitext-to-html markupLanguage="Textile" overwrite="true" multipleOutputFiles="true" formatOutput="true" sourceEncoding="utf-8">
			<fileset dir="${dox}/${dirname}">
				<include name="*.textile" />
			</fileset>
			<!-- stylesheet url="styles/main.css" / -->
		</wikitext-to-html>
		<wikitext-to-xslfo markupLanguage="Textile" sourceEncoding="utf-8" author="Elexis">
			<fileset dir="${dox}/${dirname}" includes="*.textile" />
		</wikitext-to-xslfo>
		<!-- create PDF 
				<exec command="${fop.home}/fop">
					<arg value="${dox}/${pn}/*.fo" />
					<arg value="${dox}/${pn}/*.pdf" />
				</exec -->
	</target>

	<!--
	create all projects in all repositories
	-->
	<target name="create-all" depends="initialize">
		<concat destfile="${dist}/elexis.ini">-vmargs
-Xms128m
-Xmx768m
</concat>

		<concat destfile="${dist}/.eclipseproduct">#Product Runtime Configuration File
osgi.splashPath=platform:/base/plugins/ch.elexis
eclipse.product=ch.elexis.ElexisProduct
osgi.bundles.defaultStartLevel=4
osgi.bundles=org.eclipse.equinox.transforms.hook,org.eclipse.equinox.common:start,org.eclipse.update.configurator@3:start,org.eclipse.core.runtime@start
</concat>

		<concat destfile="${dist}/configuration/config.ini">#Product Runtime Configuration File
eclipse.application=ch.elexis.ElexisApp
osgi.bundles.defaultStartLevel=4
eclipse.product=ch.elexis.ElexisProduct
osgi.splashPath=platform:/base/plugins/ch.elexis
osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.update.configurator@3:start,org.eclipse.core.runtime@start
</concat>
		<copy todir="${dist}/plugins">
			<fileset dir="${platform-runtime}/plugins">
				<include name="com.ibm.icu_*" />
				<include name="org.eclipse.equinox.launcher_*" />
				<include name="org.eclipse.update.configurator_*" />
			</fileset>
		</copy>
		<copy todir="${dist}">
			<fileset dir="rsc">
				<include name="*.ico" />
				<include name="LICENSE*.*" />
				<include name="lizenz.*" />
			</fileset>
		</copy>
		<!-- do some magic stuff to find all the files to include -->
		<listDependencies eclipse="${platform-runtime}" dest="${dist}/plugins" repositories="${repositories}" exclude="${skipPlugins}" />
		<echo message="${buildlist}" />
		<!-- compile all plugins listed from listDependencies -->
		<for param="plugin" list="${buildlist}" delimiter=",">
			<sequential>
				<echo message="@{plugin}" />
				<pluginID dir="@{plugin}" />
				<var name="plugindir" value="${dist}/plugins/${BundleId}_${version}.${DSTAMP}" />
				<path id="varcp">
					<dirset dir="${dist}/plugins" />
					<fileset dir="${dist}/plugins">
						<include name="**/*.jar" />
					</fileset>
				</path>

				<antcall target="compile" inheritrefs="true">
					<param name="dirname" value="${DirName}" />
					<param name="sourcedir" value="@{plugin}" />
					<param name="cp" value="varcp" />
				</antcall>
			</sequential>
		</for>
	</target>

	<!-- create the Windows Distribution -->
	<target name="windows">
		<property name="os" value="windows" />
		<move tofile="${dist}/elexis.exe" file="${platform-runtime}/eclipse.exe" />
		<copy todir="${dist}/plugins">
			<fileset dir="rsc/windows" excludes="elexis.exe" />
		</copy>
		<copy todir="${dist}" file="rsc/windows/elexis.exe" />
		<antcall target="create-all" />
		<antcall target="installer" inheritrefs="true" inheritall="true" />
	</target>

	<target name="installer">
		<echo message="preparing files for izpack installer" />
		<wikitext-to-html markupLanguage="Textile" overwrite="true" multipleOutputFiles="false" formatOutput="true">
			<fileset dir="rsc">
				<include name="*.textile" />
			</fileset>
			<!-- stylesheet url="styles/main.css" / -->
		</wikitext-to-html>

		<copy todir="${dist}">
			<fileset dir="rsc">
				<include name="info.html" />
				<include name="license.html" />
			</fileset>
			<filterset begintoken="&lt;?" endtoken="?&gt;">
				<filter token="xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos; " value="" />
			</filterset>
		</copy>
		<copy todir="${output}">
			<fileset dir=".">
				<include name="rsc/*.*" />
			</fileset>
		</copy>
		<copy todir="${dist}">
			<fileset dir="rsc" includes="*.ico *.png *.icns *.xpm" />
		</copy>
		<delete file="rsc/info.html" />
		<delete file="rsc/license.html" />
		<echo message="Running IzPack to build the installer..." />
		<izpack input="rsc/installer.xml" output="${output}/${os}/medelexis-${os}-${version}-install.jar" installerType="standard" inheritAll="true" basedir="${output}" compression="deflate" compressionlevel="9" />
	</target>

	<target name="all" depends="windows" />

	<target name="clean" description="Aufräumen; Alle vom letzten Build erstellten files löschen">
		<echo message="deleting output directory" />
		<delete dir="${output}" />
	</target>
</project>