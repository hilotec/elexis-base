h1. How to fetch the elexis sources from the mercurial repository

h2. Prerequisites

* Eclipse 3.5 or newer
* the hgEclipse plugin
* a sourceforge.net account, if you need write access

h2. Steps

h3. cloning the repository 

# In an empty eclipse workspace, right-click in the package explorer and select _import_. Select Mercurial as souce and then _clone an existing directory_.
# In the field _repository locaction_, enter http://elexis.hg.sourceforge.net/hgroot/elexis"
# If you are a committer, enter your sourceforge.net username and password in the appropriate fields.
# In the field _Clone directory name_, enter a Name for this repository, e.g. 'Elexis-Basis'.
# Leave the remaining fields as-is and click "finish"

This will take a quite long time (>160MB to fetch) . Time enough to think about the ideas behind Mercurial (or, more generally, distributed source code managers (DSCM)). If you know all about DSCM, you can skip this safely and continue with "checking out the sources".

Unlike CVS or SVN, a DSCM does not rely on a single central repository. Instead, everyone who wants to use the source code, holds his or her own copy of the master repository. Such a copy is called a _clone_ in DSCM-Speak. To create a clone, you perform the operation *clone* - as you might have expected. Such a clone is in fact just a directory on your hard drive. You can make a backup by simply copying it or with any other backup mechanism you might to prefer. From this clone, you create a working directory with the sources you want to work on. Remember: The clone is really a clone of the master repository and as such it contains every single commit, tag and branch that occurred to the master repository - so you can *check out* any repository position you like to your working directory and you can easily *switch* to any other repository branch without the need for an internet connection.

WIth this local clone, you can work as with any other SCM. If you know Subversion/Subclipse, you'll find this quite familiar: You *commit* your changes to the repository; you can *update*, *branch*, *tag*,  and so on. The only difference is: You do not need to bother about other members of the development team, because all changes go only to your very own repository clone and nobody will cry if you totally mess it up (not even you because you can always create a new clone from the master). If you do not want to make a new clone but only want to keep up with changes on the Master, you can *pull* your repository from the master and then *update* the source directory to adapt the changes. 

If you feel, however, that your changes should go to the master repository, you should first *pull* any changes that might have happened on the master in teh meantime, resolve all conflicts (if any) and then *push* your Repository to the master. If you do not have *push* rights, you can ask a master maintainer, to *pull* your changes, or you can send them a push request by e-mail, containing a diff of your repository to the master.  
 
h3. Checking out the sources

Now the clone operation is probably findished. You are presented a dialog "Select working directory revision". Most probably you'll want the bleeding edge, and thus, you might want to select the Revision that has the tag "tip". Then click Next, and you'll see all Elexis Projects that are part of this repository. Select those you want to import into your Eclipse workspace and click finish

h2. Repository operations

h3. Adding a new Plugin to the Repository

This is a bit tricky first, so please read carefully:

# Right-click in the project explorer, select new->project...
# Select "Plug In Project"
# Now, this is important, *uncheck* "Use default location" and instead, select a subdirectory of your mercurial repository as location for the project. You'll want to name the subdirectory just as your project is called.
# Click Next and proceed as you would with earlier projects.
# After clicking "finish" wait a minute or so and you'll see that the new Plugin project is added magically to your mercurial repository. Right.Click the newly created project and select Team->Commit to write a first import of the new Project into the local mercurial repository clone. (Again, wait a minute to see the file decorations disappear as eclipse collects the diff information to the repository)

If you are not used to DSCM's: Mind the word "clone" above: All changes go only to your local clone. You'll need to *push* them to the master (or send the master  maintainer a *pull* request).
