h1(#id). Elexis developer resources

(c) 2010 by G. Weirich	

h2. Table of contents

{toc}

h2. Preface

Elexis is originally a physician's practice management and electronic medical record (EMR) software. It is build on the Eclipse RCP(Rich Client Platform) and therefore extensible in many ways. The kernel is relatively small and contains some simple CRM(Customer Relationship Management) elements. Specific behaviour and capabilities are  introduced with plug-ins.

Elexis is distributed under the Eclipse Public License and thus can freely be extended or modifed. This article will help you in creating plugins for Elexis.

h2. Getting started

h3. Prerequisites

We assume that you have good knowledge of the Java programming language and at least a basic knowledge of the Eclipse environment. Beside this you'll need:
* Linux, Microsoft(tm) Windows(tm) 2000(tm) or newer,  Apple(tm) MacOS-X 10.4 or newer 
* Java jdk 1,5 or higher
* Eclipse 3.5 sdk for your os (<a href="http://www.eclipse.org">eclipse</a>)
* A subversion client plugin for Eclipse (e.g. sublipse; Follow the instructions <a href="http://subclipse.tigris.org/servlets/ProjectProcess?pageID=p4wYuA">here</a>)

h3. Checkout the sources

After installing the subclipse plugin, open the "SVN Repository exploring" perspective in Eclipse and create a new repository location with the URL https://elexis.svn.sourceforge.net/svnroot/elexis/trunk.

*Do not* check out the trunk as a whole. Instead select individual projects to check out. For a minimal working elexis instance, you'll need at least the following projects:

* elexis
* elexis-utilities
* elexis-importer
* database adapter(s), one ore more of 
** mysql-adapter 
** h2-adapter
** postgresql-adapter

h3. Create a run configuration

In Eclipse, chose Run-Run configurations. Right click on "Eclipse Application" and select "New". Enter an appropriate name for the project. You should see something like here:

!runconfig1.png!

In "Program to Run" select "Run a Product" and find *ch.elexis.ElexisProduct* in the Combobox.

Then, go to the tab "Arguments":

!runconfig2.png!

If you do not change anything, elexis will run in the default locale of your operating system. If you want to try a different locale and language, you can add an -nl parameter in the upper box "Program arguments". The lower box "VM arguments" can be left empty for the beginning.

Proceed to the tab "Plug-Ins"

!runconfig3.png!

* change the "Launch with" Combobox to "plugins selected below only".
* Click "Deselect all"
* Select the Plugins you want to include (at least those above)
* Click "add required plugins"
* Click "validate plugins" and solve missing requirements, if any

Then you should be able to start elexis with "Run".

h2. Creating a plugin

Elexis plugins are basically eclipse 3.5 plugins and therefore OSGi-Bundles. You'll find a lot of literature on these topics on the web, Recommended reading includes Ed Burnette's "Rich client tutorial":http://www.eclipse.org/articles/Article-RCP-1/tutorial1.html, and Dave Springgay's "Eclipse Views tutorial":http://www.eclipse.org/articles/viewArticle/ViewArticle2.html along with other articles found on the eclipse website. There are also some books on programming OSGi Bundles and Eclipse plugins. You should have a basic knowledge on programming eclipse before proceeding.

h2. Programming guidelines

You are very welcome to provide any type of plugin for elexis. Please adhere to a few rules to avoid conflicts between different plugins.

h3. 1) Name of your plugin

You may name your plugin whatever you like but we recommend that you prefix it with your name or the name of your organization.  The prefix elexis- must not be used. this is reserved for our own plugins. We recommend, that you chose a name dervived from the Plugin ID (as described below).

h3. 2) Plugin ID of your pugin

Every plugin must have its unique ID. It is common use that such an id consists of an inversely written url of the provider. So, all Plugins of elexis.ch have a plugin ID starting with ch.elexis. We recommend, that you use a similar naming scheme. In any case, the prefix  ch.elexis must not be used.

h3. 3) Packages of your plugin

Again, it is common use to name the packages of a Java programm after its originating url. Therefore, all elexis classes reside in packages prefixed with ch.elexis. We recommend that you use a similar scheme. In any case, the prefix ch.elexis must not be used.

h3. 4) Name of your Tables

To avoid name clashes between the tables of different Plugins, it is mandatory that you prefix the names of the tables your plugin creates (if any) with the pluginID. For sql syntax reasons, every dot in the name must be replaced by an underscore. Thus the plugin ch.elexis.something will create a table like CH_ELEXIS_SOMETHING_TABLE1

h3. 5) Documentation

It is recommended to document your work. Besides of the javadoc, we recommend that you include at least a 'readme.txt' or 'whatisit.textile' file in the root of your plugin that describes, what it does and what it depends on. If you want to give your users a more elaborate documentation, it should be included in a folder called doc at th root of your plugin.
For newer documentation, we use the simple Markup-Format 'Textile'. Eclipse's Mylyn plugin can manage these files out of the box and conversion to HTML and FOP/PDF is easy. Besides this, LaTeX is still supported. If you use other formats than Textile or LaTeX, your documentation can not be genereted automatically during build.

More information on the wikitext editor and the textile format can be found here:
"http://www.peterfriese.de/getting-started-with-wikitext/":http://www.peterfriese.de/getting-started-with-wikitext/
and here:
"http://wiki.eclipse.org/Mylyn/Incubator/WikiText":http://wiki.eclipse.org/Mylyn/Incubator/WikiText

More information on TeX/LaTeX can be found here:
"http://www.latex-project.org/":http://www.latex-project.org/

h2. Concepts

h3. Access privileges

Elexis has a hierarchical privilege system that is organized in roles and users.  The meaning of a privilege is defined by the implementor.

 We organize the access rights as a hierarchical system of ACE(Access Control Elements), similar to a file system path. The right "foo" might supersede a right "bar" which, in turn overlays the right "baz". This dependency is written as "foo/bar/baz". The grant of a right includes all rights contained therein. So if one has the right "foo" he or she implicitely ha also the rights "bar" and "baz". 
 
Each privilege can be granted to a single user or to a role. Any user with the role _admin_ implicitely has all privileges. 
 
A user who has the right "ACE_USERS" can grant or revoke rights to users and groups. This can be done in the preference page "Gruppen und Rechte/Zugriffssteuerung". 
 
A Plugin that wants to protect one ore more of its resources with ACE's should do the following. 
- define a name and a parent provilege for the right 
- plug into the extension point ACLContribution (which includes defining a class that implements ch.elexis.admin.IACLContributor). This makes it possible for the framework to include these acls in the preference page 
- call Hub.acl.request(right) before executing the protected operation and deny the operation if that method returns false.

A Plugin can grant one or more access rights to a single user by calling Hub.acl.grant(user,strings... ) or to a role by calling Hub.acl.grant(role,strings...). Privileges are revoked by calling the respective Hub.acl.revoke - methods. Note that privelegs are stored in the elexis database and therefore are effective for all work stations.

A view should define by itself the necessary rights to display its content, and should check if the loggend in user has the necessary rights before displaying its contents. You can use ch.elexis.action.RestrictecAction to implement an Action that honors an ACE.

The sample code of the plugin elexis-developer-resources contains examples for use of the ACLSystem (see ACLContributor.java and SampleView.java)

h3. Configuration

There are four configuration areas in elexis. Programmers should take care to use the correkt place for configuration data:

# Hub.localCfg: A Settings-object that is mapped to the Userconfiguration of the underlying system (e.g. Registry HKCU in Windows, .java/preferences in Linux). These are configuration details that must be read before a connection to a database exists. That is mainly the connection details itself.
# Hub.userCfg: A Settings-Object that ist mapped to the table USERCONFIG. Here are configuration details stored, which are specific for the logged-in user (e.g. perspective layout, window sizes, colors and fonts etc.).
# Hub.mandantCfg: A Settings-object that is mapped to the table USERCONFIG. Here are details concerning the actual Mandator. Keep in mind, that actUser and actMandant need not at all be the same person.
# Hub.globalCfg: A Settings-object that is mapped to the table CONFIG. Here are all globally valid configuration details stored. 

h3. Event Dispatcher system
 
In elexis, a view cannot rely on being part of a specific window layout. Instead, a view can be linked to any of an arbitrary number of perspectives, can be hidden or visible or can be closed. Therefore a view must not make any assumptions on other views being available at any given moment. This aticle describes, how a view can be informed on user actions in other views anyhow.

The ch.elexis.actions.ElexisEventDispatcher class is the central point for exchange of informations on user selections. ElexisEventDispatcher  is a singleton that can be accessed with ElexisEventDispatcher.getInstance(). Views that receive user actions must inform the system by calling ElexisEventDispatcher.fire(ElexisEvent ee) - methods. Classes that want to be informed on user actions in other views must register one or more ElexisEventListeners on ElexisEventDispatcher. Classes that want to know which instance of a specific class was selected last, can call the ElexisEventDispatcher.getSelected(Class c)-method.

Note: To optimize performance, we recommend following rules:

* At creation of your view, register only an IActivationListener.
* In the visible-method of this listener, register the other listeners if the visible-parameter is true, and deregister them if the parameter is false.
* On registering, call the listener-Methods yourself one time so the view is informed about the actual state.
* On disposal of the view, do not forget to unregister the IActivatorListener.

This ensures that listeners are only called if their view is visible to the user at the moment of the selection.

The sample code of the elexis-developer-resources plugins contains extensive examples on using the ElexisEventDispatcher.

 